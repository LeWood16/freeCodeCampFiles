
function checkCashRegister(price, cash, cid) {
  
  var notEnoughMoney = (cash < price);
  var changeInit = (cash - price);
  var changeDue = (cash - price);
  var myArr = [];
  var values = [100, 20, 10, 5, 1, 0.25, 0.10, 0.05, 0.01];
  var amounts = [];
  var names = ["ONE HUNDRED","TWENTY", "TEN", "FIVE", "ONE", "QUARTER", "DIME", "NICKEL", "PENNY"];
  
  for (var l = values.length - 1; l > 0; l--){
    amounts.push(cid[l][1]);
  }
  

  var myObj = {};
  for (var j = 0; j < cid.length; j++){
   var val = cid[j][0];
    var k = new Object(val);
    myObj[val] = cid[j][1];
  }
  
  var cents = {};
  cents.PENNY = 0.01;
  cents.NICKEL = 0.05;
  cents.DIME = 0.10;
  cents.QUARTER = 0.25;
  cents.ONE = 1.00;
  cents.FIVE = 5.00;
  cents.TEN = 10.00;
  cents.TWENTY = 20.00;
  cents.ONE_HUNDRED = 100.00;
  
  
  
  function total(arr){
    var tally = 0;
    for (var i = 0; i < arr.length; i++){
      tally += arr[i][1];
    }
    return tally;
  }
  
  // store total money in register in a variable, regTotal; round to cent value
  var regTotal = total(cid);
  regTotal = Math.round(regTotal*100)/100;
  var ticker = 0;


  
  // make array instead, and decrement from top value to bottom
   for (var m = 0; m < values.length; m++){ // for each tender type,
     if(values[m] <= changeDue && amounts[m]){ // if current tender is multiple of chngdue,
       ticker++;
       var amountPush = 0;
       var inc = values[m];
       // if there is money in the till of this type
       // AND if the money of this type is still a multiple of change due
       // AND change due hasn't hit zero yet
       while(amounts[m] > 0 && changeDue % values[m] === 0 && changeDue > 0){
         changeDue -= inc;
         amountPush += inc;
         amounts[m] -= inc;
       }
       myArr.push([names[m], amountPush]);
     } else if (amounts[m] > changeDue){ // if current tender amount > change due,
       continue;
     }
   }
  
  
  
  
  if (notEnoughMoney){ // if price is over the cash given
    return "Insufficient Funds";
  } else if (changeDue > regTotal){ // if the register can't handle amount of change
    return "Insufficient Funds";
  } else if (changeInit === regTotal){ // if giving out change cleans out the register
    return "Closed";
  } else if (ticker === 0){ // if the register can't handle amount of change
    return "Insufficient Funds";
  } else {
    return myArr;
   // return "new 'change due': " + changeDue + "; \r" + "array: " + myArr;
  }
  
  
  
  // for each descending tender type, X
  // if tender type (i.e. cent value) is more then change due, continue; X
  
  // if tender type is less than or equal to change due (i.e. a multiple of change due),
  // if tender amount is greater than zero, X
  // reduce change due by tender amount, in increments, until tender amount  or change     // due reaches zero
  // increase change given by iterating by cent value for given tender type;
  // push tender name and tender amount in a nested array to a variable;
  
  // when tender amount of current type reaches zero and change due is greater than
  // zero, move on to the next tender type; check if it is a multiple of current change 
  // due value; if yes, reduce change due by tender amount, in increments, until either 
  // change due or tender amount reaches zero; repeat until change due reaches zero
  
  
 
  
  // Here is your change, ma'am.
}

// Example cash-in-drawer array:
// [["PENNY", 1.01],
// ["NICKEL", 2.05],
// ["DIME", 3.10],
// ["QUARTER", 4.25],
// ["ONE", 90.00],
// ["FIVE", 55.00],
// ["TEN", 20.00],
// ["TWENTY", 60.00],
// ["ONE HUNDRED", 100.00]]

checkCashRegister(19.50, 20.00, [["PENNY", 0.50], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]);
