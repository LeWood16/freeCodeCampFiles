
function checkCashRegister(price, cash, cid) {
  
  
  price *= 100;
  cash *= 100;
  var notEnoughMoney = (cash < price);
  var changeInit = (cash - price)*100;
  var changeDue = (cash - price)*100;
  var myArr = [];
  var values = [10000, 2000, 1000, 500, 100, 25, 10, 5, 1];
  var amounts = [];
  var names = ["ONE HUNDRED","TWENTY", "TEN", "FIVE", "ONE", "QUARTER", "DIME", "NICKEL", "PENNY"];
  
  for (var l = 8; l > 0; l--){
    var vall = cid[l][1];
    var centss = +(vall*100).toFixed(8);
    amounts.push(centss);
  }
  

  var myObj = {};
  for (var j = 0; j < cid.length; j++){
   var val = cid[j][0];
    var k = new Object(val);
    myObj[val] = cid[j][1];
  }
  
  var cents = {};
  cents.PENNY = 1;
  cents.NICKEL = 5;
  cents.DIME = 10;
  cents.QUARTER = 25;
  cents.ONE = 100;
  cents.FIVE = 500;
  cents.TEN = 1000;
  cents.TWENTY = 2000;
  cents.ONE_HUNDRED = 10000;
  
  var t = amounts.reduce(function(a, b) {
    return a + b; 
  });
  
  // store total money in register in a variable, regTotal; round to cent value
  var ticker = 0;

/*
  // everything is integer-based now... now just FIX THIS FUNCTION :D :D :D 
  // make array instead, and decrement from top value to bottom
   for (var m = 0; m < values.length; m++){ // for each tender type,
     if(values[m] <= changeDue && amounts[m] >= 0){ 
       ticker++;
       var amountPush = 0;
       var inc = values[m];
       
       do{
         changeDue = Math.round(changeDue*100)/100;
         amountPush = Math.round(amountPush*100)/100;
         amounts[m] = Math.round(amounts[m]*100)/100;
         changeDue -= inc;
         amountPush += inc;
         amounts[m] -= inc;
       }
      while(amounts[m] > 0 && changeDue % values[m] === 0 && changeDue > 0);

       myArr.push([names[m], amountPush]);
     } else if (amounts[m] > changeDue){
       continue;
     }
   }
  
 */ 
  // the problem is with the non integer math... change them to integers, then change  
  // them to non integers after the array has been constructed
  
  if (notEnoughMoney){ // if price is over the cash given
    return "Insufficient Funds";
  } else if (changeDue > t){ // if the register can't handle amount of change
    return "Insufficient Funds";
  } else if (changeInit === t){ // if giving out change cleans out the register
    return "Closed";
 // } else if (ticker === 0){ // if the register can't handle amount of change
   // return "Insufficient Funds";
  } else {
    return t;
   // return "new 'change due': " + changeDue + "; \r" + "array: " + myArr;
  }
  
  
  
  // for each descending tender type, X
  // if tender type (i.e. cent value) is more then change due, continue; X
  
  // if tender type is less than or equal to change due (i.e. a multiple of change due),
  // if tender amount is greater than zero, X
  // reduce change due by tender amount, in increments, until tender amount  or change     // due reaches zero
  // increase change given by iterating by cent value for given tender type;
  // push tender name and tender amount in a nested array to a variable;
  
  // when tender amount of current type reaches zero and change due is greater than
  // zero, move on to the next tender type; check if it is a multiple of current change 
  // due value; if yes, reduce change due by tender amount, in increments, until either 
  // change due or tender amount reaches zero; repeat until change due reaches zero
  
  
 
  
  // Here is your change, ma'am.
}

// Example cash-in-drawer array:
// [["PENNY", 1.01],
// ["NICKEL", 2.05],
// ["DIME", 3.10],
// ["QUARTER", 4.25],
// ["ONE", 90.00],
// ["FIVE", 55.00],
// ["TEN", 20.00],
// ["TWENTY", 60.00],
// ["ONE HUNDRED", 100.00]]

checkCashRegister(37.10, 50.00, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.10], ["QUARTER", 4.25], ["ONE", 90.00], ["FIVE", 55.00], ["TEN", 20.00], ["TWENTY", 60.00], ["ONE HUNDRED", 100.00]]);
